.. contents::
   :depth: 3
..

切片-动态分配大小的连续空间
===========================

切片
----

从数组切片生成新的切片
~~~~~~~~~~~~~~~~~~~~~~

::

   slice [开始位置：结束位置]

   · slice表示目标切片对象
   · 开始位置对应目标切片对象的索引
   · 结束位置对于目标切片的结束索引

从数组生成切片，代码如下：

::

   fmt.Println(array_list,array_list[1:2])     // [hujianli1 hujianli2 hujianli3] [hujianli2]

(1)从指定范围中生成切片

::

   package main

   import "fmt"

   func main() {
       var number2 [30]int
       // 循环出1~30
       for i := 0; i < 30; i++ {
           number2[i] = i + 1
       }
       // 区间
       fmt.Println(number2[10:15]) //[11 12 13 14 15]
       // 中间到尾部的所有元素
       fmt.Println(number2[20:])   //[21 22 23 24 25 26 27 28 29 30]



   }

(2)表示原有切片

::

   fmt.Println(number2[:])     //[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30]

(3) 重置切片，清空所有元素

::

   fmt.Println(number2[0:0])   //[]

声明切片
~~~~~~~~

每一种类型都可以拥有其切片类型，表示多个类型元素的连续集合，因此切片类型也可以被声明。

切片类型声明格式如下：

::

   var name []T

::

   package main

   import "fmt"

   func main() {
       var strList  []string       // 声明字符串切片
       var numList []int           // 声明整型切片
       var numListEmpty = []int{}  // 声明一个空切片
       fmt.Println(strList,numList,numListEmpty)   // 输出3个切片
       fmt.Println(len(strList),len(numList),len(numListEmpty))    //输出3个切片大小
       // 切片判定空的结果
       fmt.Println(strList == nil)
       fmt.Println(numList == nil)
       fmt.Println(numListEmpty == nil)

   }

使用make()函数构造切片
~~~~~~~~~~~~~~~~~~~~~~

如果需要动态地创建一个切片，可以使用make()内建函数，格式如下：

::

   make([]T, size, cap)

   · T：切片的元素类型。
   · size：就是为这个类型分配多少个元素
   · cap： 预分配的元素数量，降低多次分配空间造成的性能问题

::

       a := make([]int, 2)
       b := make([]int, 2, 10)
       fmt.Println(a,b)        //[0 0] [0 0]
       fmt.Println(len(a),len(b))  //2 2

使用append()函数为切片添加元素
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   package main

   import "fmt"

   func main() {
       var numbers []int  // 声明一个整型切片
       for i := 0; i < 10; i++ {
           numbers = append(numbers, i)        // 循环向切片添加10个数
           // 查看切片的长度、容量、指针变化
           fmt.Printf("len: %d cap: %d pointer: %p\n", len(numbers), cap(numbers), numbers)
       }

   }

append()一次添加一个元素和一次性添加很多元素

::

       // 定义3个切片
       var (
           car []string
           car2 []string
           car3 []string
       )

       //添加1个元素
       car = append(car, "hujianli1")      //car2 []string

       // 添加多个元素
       car2 = append(car, "hujianli2", "hujianli3")    //[hujianli1 hujianli2 hujianli3]

       // 添加一个切片
       team := []string{"var1", "var2", "var3"}        //[hujianli1 var1 var2 var3]
       car3 = append(car, team...)

       fmt.Println(car)
       fmt.Println(car2)
       fmt.Println(car3)

复制切片元素到另一个切片
~~~~~~~~~~~~~~~~~~~~~~~~

使用Go语言内建的copy()函数，可以迅速地将一个切片的数据复制到另外一个切片空间中，copy()函数的使用格式如下：

::

   copy(destSlice, srcSlice []T) int

   · srcSlice 数据来源切片
   · destSlice 为复制的目标

::

   package main

   import "fmt"

   func main() {
       // 设置元素数量为1000
       const elementCount = 1000
       // 预分配足够多的元素切片
       srcData := make([]int, elementCount)
       // 切片赋值
       for i := 0; i < elementCount; i++ {
           srcData[i] = i
       }
       // 引用切片数据
       refData := srcData

       copyData := make([]int, elementCount)
       // 将数据复制到新的切片空间中
       copy(copyData, srcData)
       srcData[0] = 999 // 修改原始数据的第一个元素
       // 打印引用切片的第一个元素
       fmt.Println(refData[0])             // 999
       // 打印复制切片的第一个和最后一个元素
       fmt.Println(copyData[0], copyData[elementCount-1])  // 0 999
       // 复制原始数据4~6.不包括6
       copy(copyData, srcData[4:6])
       for i := 0; i < 5; i++ {
           fmt.Printf("%d ", copyData[i])   //4 5 2 3 4
       }

   }

从切片中删除元素
~~~~~~~~~~~~~~~~

Go语言中切片删除元素的本质是：
以被删除元素为分界点，将前后两个部分的内存重新连接起来。

::

   package main

   import "fmt"

   func main() {
       seq := []string{"a", "b", "c", "d", "e"}
       // 指定删除位置
       index := 2
       // 查看删除位置之前和之后的元素
       fmt.Println(seq[:index], seq[index+1:]) //[a b] [d e]

       // 将删除之前和之后的元素连接起来
       new_seq := append(seq[:index], seq[index+1:]...)
       fmt.Println(new_seq)        //[a b d e]
   }
