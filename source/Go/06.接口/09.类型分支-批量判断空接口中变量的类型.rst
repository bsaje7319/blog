.. contents::
   :depth: 3
..

09.类型分支-批量判断空接口中变量的类型
======================================

Go语言的switch不仅可以像其他语言一样实现数值、字符串的判断，
还有一种特殊的用途—\ ``判断一个接口内保存或实现的类型``\ 。

1.类型断言的书写格式
--------------------

switch 实现类型分支时写法格式如下：

.. code:: go

   switch 接口变量(type){
       case 变量1：
           //变量是类型1时的处理
       case 变量2：
           //变量是类型2时的处理
       .....
       default:
           // 变量不是所有case中列举的类型时的处理
   }

· 接口变量：表示需要判断的接口类型的变量。

· 类型1、类型2····：
表示接口变量可能具有的类型列表，满足时，会指定case对应的分支进行处理。

2.使用类型分支判断基本类型
--------------------------

.. code:: go

   package main

   import "fmt"

   func printType(v interface{}) {
       switch v.(type) {
       case int:
           fmt.Println(v, "is int")        //1024 is int
       case string:
           fmt.Println(v, "is string")     //hujianli is string
       case bool:
           fmt.Println(v, "is bool")       //true is bool
       }
   }

   func main() {
       printType(1024)
       printType("hujianli")
       printType(true)
   }

3.使用类型分支判断接口类型
--------------------------

多个接口进行类型断言时，可以使用类型分支简化判断过程。

.. code:: go

   package main

   import "fmt"

   // 电子支付方式
   type Alipay struct {
   }

   // 为Alipay添加CanUseFaceID()方法，表示电子支付方式支持刷脸
   func (a *Alipay) CanUseFaceID() {
   }

   // 现金支付方式
   type Cash struct {
   }

   // 为Cash添加Stolen()方法，表示现金支付方式会出现偷窃情况
   func (a *Cash) Stolen() {
   }

   // 具备刷脸特性的接口
   type CantainCanUseFaceID interface {
       CanUseFaceID()
   }

   // 具备被偷特性的接口
   type CantainStolen interface {
       Stolen()
   }

   // 打印支付方式具备的特点
   func print(payMethod interface{}) {
       switch payMethod.(type) {
       case CantainCanUseFaceID: // 可以刷脸
           fmt.Printf("%T can use faceid\n", payMethod)
       case CantainStolen: // 可能被窃
           fmt.Printf("%T may be stolen\n", payMethod)
       }
   }

   func main() {
       //使用电子支付判断
       print(new(Alipay)) //*main.Alipay can use faceid

       //使用现金判断
       print(new(Cash)) //*main.Cash may be stolen
   }
