.. contents::
   :depth: 3
..

Go执行shell命令
===============

执行单个命令
------------

go执行shell示例1：

.. code:: shell

   package main

   import (
       "fmt"
       "log"
       "os/exec"
   )

   func main() {
       out, err := exec.Command("date","+%F").Output()
       if err != nil {
           log.Fatal(err)
       }
       fmt.Printf("The date is %s\n", out)
   }

执行多个命令
------------

go执行shell示例2：

.. code:: go

   package main

   import (
       "bytes"
       "fmt"
       "log"
       "os/exec"
       "strings"
   )

   func main() {
       cmd := exec.Command("tr", "a-z", "A-Z")
       cmd.Stdin = strings.NewReader("some input")
       var out bytes.Buffer
       cmd.Stdout = &out
       err := cmd.Run()
       if err != nil {
           log.Fatal(err)
       }
       fmt.Printf("in all caps: %q\n", out.String())


       cmd2 :=exec.Command("uptime")
       cmd3 :=exec.Command("pwd")
       var out1 bytes.Buffer
       var out2 bytes.Buffer
       cmd2.Stdout = &out1
       cmd3.Stdout = &out2
       err2 :=cmd2.Run()
       err3 :=cmd3.Run()
       if err2 != nil {
           log.Fatal(err2)
       }
       if err3 !=nil{
           log.Fatal(err3)
       }
       fmt.Println(out1.String())
       fmt.Println(out2.String())
   }

示例3

.. code:: go

   package main

   import (
       "bufio"
       "fmt"
       "os/exec"
   )

   func main() {
       cmd0 := exec.Command("echo","-n","My first command comes form golang")

       stdout0,error := cmd0.StdoutPipe()
       if error != nil {
           fmt.Printf("Error: Could't obtain the stdout pipe for command NO.0: %s\n",error)
           return
       }
       if err := cmd0.Start();err !=nil {
           fmt.Printf("Error : the command No.0 can not be startup: %s\n",err)
           return
       }

       //output0 := make([]byte,100)
       //n,err1 := stdout0.Read(output0)
       //if err1 != nil {
       //  fmt.Printf("Error: Cloud't read data form the pipe: %s\n",err1)
       //  return
       //}
       //fmt.Printf("%s\n",output0[:n])

       outputBuf0 := bufio.NewReader(stdout0)
       output0,_,err := outputBuf0.ReadLine()
       if err != nil {
           fmt.Printf("Error: Cloudn't read data from the pipe: %s\n",err)
           return
       }
       fmt.Printf("%s\n",string(output0))
   }

实现两条命令的管道功能
----------------------

实现shell命令\ ``ps aux|grep sshd``

.. code:: go

   package main

   import (
       "bytes"
       "fmt"
       "os/exec"
   )

   func main() {
       cmd1 := exec.Command("ps aux")
       cmd2 := exec.Command("grep sshd")

       // 设置cmd1的stdout字段，然后启动cmd1,并等待它运行完毕
       var outputBuf1 bytes.Buffer
       cmd1.Stdout = &outputBuf1
       if err := cmd1.Start(); err != nil {
           fmt.Printf("Error: The first command can not be startup %s\n", err)
           return
       }
       if err := cmd1.Wait(); err != nil {
           fmt.Printf("Error: Couldn't wait for the first command:%s\n", err)
           return
       }
       // 设置cmd2的stdin和stdout字段，然后启动cmd2,并等待它运行完毕
       cmd2.Stdin = &outputBuf1
       var outputBuf2 bytes.Buffer
       cmd2.Stdout = &outputBuf2
       if err := cmd2.Start(); err != nil {
           fmt.Printf("Error: The Second command can not be startup %s\n", err)
           return
       }
       if err := cmd2.Wait(); err != nil {
           fmt.Printf("Error: Couldn't wait for the Second command:%s\n", err)
           return
       }
       fmt.Printf("%s\n",outputBuf2.Bytes())

       // 模拟出ps aux|grep sshd
   }

封装为函数

.. code:: go

   package main

   import (
       "bufio"
       "bytes"
       "fmt"
       "io"
       "os/exec"
   )

   func main() {
       runCmd()
       fmt.Println()
       runCmdWithPipe()
   }

   func runCmdWithPipe() {
       fmt.Println("Run command `ps aux | grep apipe`: ")
       cmd1 := exec.Command("ps", "aux")
       cmd2 := exec.Command("grep", "apipe")
       var outputBuf1 bytes.Buffer
       cmd1.Stdout = &outputBuf1
       if err := cmd1.Start(); err != nil {
           fmt.Printf("Error: The first command can not be startup %s\n", err)
           return
       }
       if err := cmd1.Wait(); err != nil {
           fmt.Printf("Error: Couldn't wait for the first command: %s\n", err)
           return
       }
       cmd2.Stdin = &outputBuf1
       var outputBuf2 bytes.Buffer
       cmd2.Stdout = &outputBuf2
       if err := cmd2.Start(); err != nil {
           fmt.Printf("Error: The second command can not be startup: %s\n", err)
           return
       }
       if err := cmd2.Wait(); err != nil {
           fmt.Printf("Error: Couldn't wait for the second command: %s\n", err)
           return
       }
       fmt.Printf("%s\n", outputBuf2.Bytes())
   }

   func runCmd() {
       useBufferedIO := false
       fmt.Println("Run command `echo -n \"My first command comes from golang.\"`: ")
       cmd0 := exec.Command("echo", "-n", "My first command comes from golang.")
       stdout0, err := cmd0.StdoutPipe()
       if err != nil {
           fmt.Printf("Error: Couldn't obtain the stdout pipe for command No.0: %s\n", err)
           return
       }
       if err := cmd0.Start(); err != nil {
           fmt.Printf("Error: The command No.0 can not be startup: %s\n", err)
           return
       }
       if !useBufferedIO {
           var outputBuf0 bytes.Buffer
           for {
               tempOutput := make([]byte, 5)
               n, err := stdout0.Read(tempOutput)
               if err != nil {
                   if err == io.EOF {
                       break
                   } else {
                       fmt.Printf("Error: Couldn't read data from the pipe: %s\n", err)
                       return
                   }
               }
               if n > 0 {
                   outputBuf0.Write(tempOutput[:n])
               }
           }
           fmt.Printf("%s\n", outputBuf0.String())
       } else {
           outputBuf0 := bufio.NewReader(stdout0)
           output0, _, err := outputBuf0.ReadLine()
           if err != nil {
               fmt.Printf("Error: Couldn't read data from the pipe: %s\n", err)
               return
           }
           fmt.Printf("%s\n", string(output0))
       }
   }

.. code:: go

   package main

   import (
       "bytes"
       "errors"
       "fmt"
       "io"
       "os"
       "os/exec"
       "os/signal"
       "runtime/debug"
       "strconv"
       "strings"
       "sync"
       "syscall"
       "time"
   )

   func main() {
       go func() {
           time.Sleep(5 * time.Second)
           sendSignal()
       }()
       handleSignal()
   }

   func handleSignal() {
       sigRecv1 := make(chan os.Signal, 1)
       sigs1 := []os.Signal{syscall.SIGINT, syscall.SIGQUIT}
       fmt.Printf("Set notification for %s... [sigRecv1]\n", sigs1)
       signal.Notify(sigRecv1, sigs1...)
       sigRecv2 := make(chan os.Signal, 1)
       sigs2 := []os.Signal{syscall.SIGQUIT}
       fmt.Printf("Set notification for %s... [sigRecv2]\n", sigs2)
       signal.Notify(sigRecv2, sigs2...)

       var wg sync.WaitGroup
       wg.Add(2)
       go func() {
           for sig := range sigRecv1 {
               fmt.Printf("Received a signal from sigRecv1: %s\n", sig)
           }
           fmt.Printf("End. [sigRecv1]\n")
           wg.Done()
       }()
       go func() {
           for sig := range sigRecv2 {
               fmt.Printf("Received a signal from sigRecv2: %s\n", sig)
           }
           fmt.Printf("End. [sigRecv2]\n")
           wg.Done()
       }()

       fmt.Println("Wait for 2 seconds... ")
       time.Sleep(2 * time.Second)
       fmt.Printf("Stop notification...")
       signal.Stop(sigRecv1)
       close(sigRecv1)
       fmt.Printf("done. [sigRecv1]\n")
       wg.Wait()
   }

   func sendSignal() {
       defer func() {
           if err := recover(); err != nil {
               fmt.Printf("Fatal Error: %s\n", err)
               debug.PrintStack()
           }
       }()
       // ps aux | grep "signal" | grep -v "grep" | grep -v "go run" | awk '{print $2}'
       cmds := []*exec.Cmd{
           exec.Command("ps", "aux"),
           exec.Command("grep", "signal"),
           exec.Command("grep", "-v", "grep"),
           exec.Command("grep", "-v", "go run"),
           exec.Command("awk", "{print $2}"),
       }
       output, err := runCmds(cmds)
       if err != nil {
           fmt.Printf("Command Execution Error: %s\n", err)
           return
       }
       pids, err := getPids(output)
       if err != nil {
           fmt.Printf("PID Parsing Error: %s\n", err)
           return
       }
       fmt.Printf("Target PID(s):\n%v\n", pids)
       for _, pid := range pids {
           proc, err := os.FindProcess(pid)
           if err != nil {
               fmt.Printf("Process Finding Error: %s\n", err)
               return
           }
           sig := syscall.SIGQUIT
           fmt.Printf("Send signal '%s' to the process (pid=%d)...\n", sig, pid)
           err = proc.Signal(sig)
           if err != nil {
               fmt.Printf("Signal Sending Error: %s\n", err)
               return
           }
       }
   }

   func getPids(strs []string) ([]int, error) {
       var pids []int
       for _, str := range strs {
           pid, err := strconv.Atoi(strings.TrimSpace(str))
           if err != nil {
               return nil, err
           }
           pids = append(pids, pid)
       }
       return pids, nil
   }

   // 返回进程ID列表
   func runCmds(cmds []*exec.Cmd) ([]string, error) {
       if cmds == nil || len(cmds) == 0 {
           return nil, errors.New("The cmd slice is invalid!")
       }
       first := true
       var output []byte
       var err error
       for _, cmd := range cmds {
           fmt.Printf("Run command: %v\n", getCmdPlaintext(cmd))
           if !first {
               var stdinBuf bytes.Buffer
               stdinBuf.Write(output)
               cmd.Stdin = &stdinBuf
           }
           var stdoutBuf bytes.Buffer
           cmd.Stdout = &stdoutBuf
           if err = cmd.Start(); err != nil {
               return nil, getError(err, cmd)
           }
           if err = cmd.Wait(); err != nil {
               return nil, getError(err, cmd)
           }
           output = stdoutBuf.Bytes()
           //fmt.Printf("Output:\n%s\n", string(output))
           if first {
               first = false
           }
       }
       var lines []string
       var outputBuf bytes.Buffer
       outputBuf.Write(output)
       for {
           line, err := outputBuf.ReadBytes('\n')
           if err != nil {
               if err == io.EOF {
                   break
               } else {
                   return nil, getError(err, nil)
               }
           }
           lines = append(lines, string(line))
       }
       return lines, nil
   }

   func getCmdPlaintext(cmd *exec.Cmd) string {
       var buf bytes.Buffer
       buf.WriteString(cmd.Path)
       for _, arg := range cmd.Args[1:] {
           buf.WriteRune(' ')
           buf.WriteString(arg)
       }
       return buf.String()
   }

   func getError(err error, cmd *exec.Cmd, extraInfo ...string) error {
       var errMsg string
       if cmd != nil {
           errMsg = fmt.Sprintf("%s  [%s %v]", err, (*cmd).Path, (*cmd).Args)
       } else {
           errMsg = fmt.Sprintf("%s", err)
       }
       if len(extraInfo) > 0 {
           errMsg = fmt.Sprintf("%s (%v)", errMsg, extraInfo)
       }
       return errors.New(errMsg)
   }
