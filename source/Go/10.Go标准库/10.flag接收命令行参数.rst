.. contents::
   :depth: 3
..

flag接收命令行参数
==================

::

    import "flag"

flag包实现了命令行参数的解析。

示例1
-----

.. code:: go

    package main

    import (
        "flag"
        "fmt"
    )

    func main() {
        var confPath string
        var port int
        var b bool

        flag.StringVar(&confPath, "conf", "", "input config path.")
        flag.IntVar(&port, "p", 8000, "")
        flag.BoolVar(&b, "b", false, "input bool.")
        //注册
        flag.Parse()
        fmt.Println("configPath: ", confPath)
        fmt.Println("port: ", port)
        fmt.Println("b: ", b)
    }

.. code:: go

    D:\go_studay\go_path\src\github.com\flag_project>go build -o bin/flag.exe  github.com/flag_project/src/go_dev/args

    D:\go_studay\go_path\src\github.com\flag_project\bin>flag.exe -conf "/home/config" -p 8080 -b true
    configPath:  /home/config
    port:  8080
    b:  true

示例2
-----

Mysql接收参数的例子

.. code:: go

    package main

    import (
        "flag"
        "fmt"
    )

    func main() {
        var Username string
        var Password string
        var port int
        var DBname string

        flag.StringVar(&Username,"u","","mysql User")
        flag.StringVar(&Password,"p","","mysql Password")
        flag.IntVar(&port,"port",3306,"MySQL port default 3306")
        flag.StringVar(&DBname,"db","","MySQL database name")

        //注册
        flag.Parse()

        fmt.Println("MySQL Username: ",Username)
        fmt.Println("MySQL Password: ",Password)
        fmt.Println("MySQL Port: ",port)
        fmt.Println("MySQL DBName: ",DBname)
        if Username != "root" {
            fmt.Println("please input mysql user root!")
        }
    }

.. code:: go

    D:\go_studay\go_path\src\github.com\flag_project>go build -o bin/mysql.exe  github.com/flag_project/src/go_dev/mysqlArgs

    D:\go_studay\go_path\src\github.com\flag_project\bin>mysql.exe -u root -p admin#123! -db dbweb
    MySQL Username:  root
    MySQL Password:  admin#123!
    MySQL Port:  3306
    MySQL DBName:  dbweb

示例3
-----

.. code:: go

    package main

    import (
        "flag"
        "fmt"
        "os"
        "strconv"
        "strings"
    )

    func usage() {
        flag.Usage()
        fmt.Printf("\n")
        fmt.Printf("Format:\nmooon_ssh -h=host1,host2,... -P=port -u=user -p=password -c=command\n")
        fmt.Printf("\n")
        fmt.Printf("Example:\nmooon_ssh -h=192.168.31.32 -P=22 -u=root -p='root@2018' -c='whoami'\n")
        fmt.Printf("\n")
    }

    func main() {
        var (
            g_help     = flag.Bool("H", false, "Display a help message and exit")
            g_hosts    = flag.String("h", "", "Connect to the remote machines on the given hosts separated by comma, can be replaced by environment variable 'H'")
            g_port     = flag.Int("P", 22, "Specifies the port to connect to on the remote machines, can be replaced by environment variable 'PORT'")
            g_user     = flag.String("u", "", "Specifies the user to log in as on the remote machines, can be replaced by environment variable 'U'")
            g_password = flag.String("p", "", "The password to use when connecting to the remote machines, can be replaced by environment variable 'P'")
            g_command  = flag.String("c", "", "The command is executed on the remote machines")
        )
        var hosts, user, password string
        var port int
        flag.Parse()

        // help
        if *g_help {
            usage()
            os.Exit(1)
        }

        // hosts
        if *g_hosts != "" {
            hosts = *g_hosts
        } else {
            s := os.Getenv("H")
            if s != "" {
                hosts = s
            } else {
                fmt.Printf("Parameter[\033[1;33m-h\033[m] not set\n\n")
                usage()
                os.Exit(1)
            }
        }

        // port
        s := os.Getenv("PORT")
        if s == "" {
            port = *g_port
        } else {
            port_, err := strconv.Atoi(s)
            if err != nil {
                fmt.Printf("Parameter[\033[1;33m-P\033[m]: invaid port\n\n")
                usage()
                os.Exit(1)
            } else {
                port = port_
            }
        }

        // user
        if *g_user != "" {
            user = *g_user
        } else {
            s := os.Getenv("U")
            if s != "" {
                user = s
            } else {
                fmt.Printf("Parameter[\033[1;33m-u\033[m] not set\n\n")
                usage()
                os.Exit(1)
            }
        }

        // password
        if *g_password != "" {
            password = *g_password
        } else {
            s := os.Getenv("P")
            if s != "" {
                password = s
            } else {
                fmt.Printf("Parameter[\033[1;33m-p\033[m] not set\n\n")
                usage()
                os.Exit(1)
            }
        }

        // command
        if *g_command == "" {
            fmt.Printf("Parameter[\033[1;33m-c\033[m] not set\n\n")
            usage()
            os.Exit(1)
        }

        host_array := strings.Split(hosts, ",")
        for _, host := range host_array {
            ip_port := host + ":" + fmt.Sprintf("%d", port)
            fmt.Println(ip_port, user, password)
        }
    }
