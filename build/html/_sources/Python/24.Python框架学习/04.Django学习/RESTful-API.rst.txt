.. contents::
   :depth: 3
..

RESTful-API
===========

RESTful规范——如何写API
----------------------

API接口应该如何写？API跟URL有什么不同？这绝对是不可以被忽略的问题，如果API写得乱七八糟，很有可能会失去负责前端开发的同事的信任。将API写得“高大上”，也是一名开发者工匠精神的一种体现。下面来介绍如何写API。

（1）如果是对同一个表进行数据操作（增、删、改、查），应该使用一条API，然后根据method的不同，进行不同的操作。

--------------

        ::

            GET/POST/PUT/DELETE/PATCH

--------------

（2）面向资源编程，通过API提交的参数最好是名词，比如name，尽量少用动词。

--------------

        ::

            http://www.abc.com/name

--------------

（3）体现版本，在API中加入像v1、v2这样的版本代号：

--------------

        ::

            http://www.abc.com/v1/namehttp://www.abc.com/v2/name

--------------

（4）体现API，让使用者一眼能看出这是API而不是URL，应该在API中加入提示：

--------------

        ::

            http://www.abc.com/api/v1/namehttp://www.abc.com/api/v2/name

--------------

（5）使用HTTPS，这一项原本是为了安全考虑，但是随着国内外互联网环境对安全性越来越重视，谷歌浏览器对所有不是HTTPS请求的链接全都会提示用户此链接为不安全链接，腾讯等平台也对小程序等产品强制要求使用HTTPS协议。不过，好在国内许多提供云服务的公司，像腾讯云、阿里云等，都提供免费的SSL证书，供开发者去申请。

--------------

        ::

            https://www.abc.com/api/v1/namehttps://www.abc.com/api/v2/name

--------------

（6）响应式设置状态码，例如，200和201代表操作成功，403代表权限不够，404代表没有指定资源，500代表运行时发现代码逻辑错误等。

--------------

        ::

            return HttpResponse('adgbag',status=300)

--------------

（7）API的参数中加入筛选条件参数，也可以理解为获取资源优先选择GET的方式。

--------------

        ::

            https://www.abc.com/api/v2/name?page=1&size=10

--------------

（8）返回值的规范，不同的method操作成功后，后端应该响应的返回值如下：

--------------

        ::

            https://www.abc.com/api/v1/name

--------------

不同的提交方式代表对数据进行不同的操作：

·GET：所有列表。

·POST：新增的数据。

--------------

        ::

            https://www.abc.com/api/v1/name/1

--------------

·GET：单条数据。

·PUT：更新，返回更新的数据。

·PATCH：局部更新，返回更新的数据。

·DELETE：删除，返回空文档。

（9）返回错误信息，应该加入错误代号code，让用户能直接看出是哪种类型的错误。

--------------

        ::

            ret {  code:1000，  data:{    {'id':1,'title':'lala'}  }}

--------------

（10）返回的详细信息，应该以字典的形式放在data中。

--------------

        ::

            ret {   code:1000，  data:{    {'id':1,'title':'lala','detail':http://www.……}  }}

--------------

RESTful规范是业内约定俗成的规范，并不是技术上定义的公式，在实际生产使用中，大家还是要根据业务灵活运用。

Django REST framework简介
-------------------------

如果可以将Django REST
framework的10个常用组件融会贯通，那么使用Django开发前后端分离的项目中有可能遇到的绝大部分需求，都能得到高效的解决。

Django REST framework的10个常用组件如下：

·权限组件；

·认证组件；

·访问频率限制组件；

·序列化组件；

·路由组件；

·视图组件；

·分页组件；

·解析器组件；

·渲染器组件；

·版本组件。

Django REST framework官方文档的地址是
https://www.django-rest-framework.org/\ 。

Serializer和ModelSerializer序列化选择
-------------------------------------

我们对Django REST
framework的两种序列化方式做一个总结：Serializer和ModelSerializer两种序列化方式中，前者比较容易理解，适用于新手；后者则在商业项目中被使用的更多，在实际开发中建议大家多使用后者。

记得笔者初学Django REST
framework时，一直很困惑于用哪种序列化方式更好。因为许多教材中都将Django
REST
framework的Serializer和ModelSerializer，与Django的Form和ModelForm做对比，虽然二者相似，在优劣选择上却是不同的。Form虽然没有ModelForm效率高，但是ModelForm的使用增加了项目的耦合度，不符合项目解耦原则，所以Form比ModelForm更优（除了字段量过大的情况）；而ModelSerializer有Serializer所有的优点，同时并没有比Serializer明显的不足之外，所以ModelSerializer比Serializer更优。

用mixins.ListModelMixin+GenericAPIView的方式实现视图封装
--------------------------------------------------------

::

    # 使用mixins.ListModelMixin+generics.GenericAPIView对APIView进行一次封装，至少需要加一个get函数：
    class BookMixinView1(mixins.ListModelMixin, generics.GenericAPIView):
        queryset = Book.objects.all()
        serializer_class = BookModelSerializer

        def get(self, request, *args, **kwargs):  # 如果这里不加get函数，代表默认不支持get访问这个api，所以必须加上
            APIKey = self.request.query_params.get("apikey", 0)
            developer = UserProfile.objects.filter(APIkey=APIKey).first()
            if developer:
                balance = developer.money
                if balance > 0:
                    isbn = self.request.query_params.get("isbn", 0)
                    developer.money -= 1
                    developer.save()
                    self.queryset = Book.objects.filter(isbn=int(isbn))
                    return self.list(request, *args, **kwargs)
                else:
                    return Response("兄弟，又到了需要充钱的时候！好开心啊！")
            else:
                return Response("查无此人啊")

用generics.ListAPIView的方式实现视图封装
----------------------------------------

::

    # 而使用generics.ListAPIView则可以不用加这个函数，因为generics.ListAPIView相对于mixins.ListModelMixin+generics.GenericAPIView而言，所谓的封装，就是封装了一个get函数罢了。
    class BookMixinView2(generics.ListAPIView):
        queryset = Book.objects.all()
        serializer_class = BookModelSerializer

        def get(self, request, *args, **kwargs):
            APIKey = self.request.query_params.get("apikey", 0)
            developer = UserProfile.objects.filter(APIkey=APIKey).first()
            if developer:
                balance = developer.money
                if balance > 0:
                    isbn = self.request.query_params.get("isbn", 0)
                    developer.money -= 1
                    developer.save()
                    self.queryset = Book.objects.filter(isbn=int(isbn))
                    return self.list(request, *args, **kwargs)
                else:
                    return Response("兄弟，又到了需要充钱的时候！好开心啊！")
            else:
                return Response("查无此人啊")

用viewsets+Router的方式实现视图封装
-----------------------------------

::

    class IsDeveloper(BasePermission):
        message = '查无此人啊'

        def has_permission(self, request, view):
            APIKey = request.query_params.get("apikey", 0)
            developer = UserProfile.objects.filter(APIkey=APIKey).first()
            if developer:
                return True
            else:
                print(self.message)
                return False


    class EnoughMoney(BasePermission):
        message = "兄弟，又到了需要充钱的时候！好开心啊！"

        def has_permission(self, request, view):
            APIKey = request.query_params.get("apikey", 0)
            developer = UserProfile.objects.filter(APIkey=APIKey).first()
            balance = developer.money
            if balance > 0:
                developer.money -= 1
                developer.save()
                return True
            else:
                return False


    class BookModelViewSet(viewsets.ModelViewSet):
        authentication_classes = []
        permission_classes = [IsDeveloper, EnoughMoney]
        queryset = Book.objects.all()
        serializer_class = BookModelSerializer

        def get_queryset(self):
            isbn = self.request.query_params.get("isbn", 0)
            books = Book.objects.filter(isbn=int(isbn))
            queryset = books
            return queryset

urls.py

::

    from django.contrib import admin
    from django.urls import path
    from users.views import BookAPIView1, BookAPIView2, BookMixinView1, BookMixinView2, BookModelViewSet
    from rest_framework.routers import DefaultRouter
    from django.conf.urls import include

    router = DefaultRouter()
    router.register(r'apibook5', BookModelViewSet)

    urlpatterns = [
        path('admin/', admin.site.urls),
        # Serializer
        path('apibook1/', BookAPIView1.as_view(), name='book1'),
        # ModelSerializer
        path('apibook2/', BookAPIView2.as_view(), name='book2'),

        # 用mixins.ListModelMixin+GenericAPIView的方式实现视图封装
        path('apibook3/', BookMixinView1.as_view(), name='book3'),
        # 用generics.ListAPIView的方式实现视图封装
        path('apibook4/', BookMixinView2.as_view(), name='book4'),
        # 用viewsets+Router的方式实现视图封装
        path('', include(router.urls)),
    ]

使用Postman对API进行测试，用GET的方式访问：

--------------

        ::

            http://127.0.0.1:8000/apibook1/?apikey=abcdefghigklmn&isbn=777777
            http://127.0.0.1:8000/apibook2/?apikey=abcdefghigklmn&isbn=777777
            http://127.0.0.1:8000/apibook3/?apikey=abcdefghigklmn&isbn=777777
            http://127.0.0.1:8000/apibook4/?apikey=abcdefghigklmn&isbn=777777
            http://127.0.0.1:8000/apibook5/?apikey=abcdefghigklmn&isbn=777777
