.. contents::
   :depth: 3
..

玩转Django2.0基础四(视图)
=========================

一、视图说明

　　视图(View)是Django的MTV架构模式的V部分，主要负责处理用户请求和生成相应的相应部分，然后在页面或其它类型文档中显示。也可以理解为视图是MVC架构里面的C部分（控制器）,主要处理功能和业务上的逻辑。

前期准备

Django配置信息
--------------

::

    # 创建项目
    django-admin startproject mydajngo

    # 创建app
    (mydjango) D:\mydjango>python manage.py startapp web
    (mydjango) D:\mydjango>python manage.py startapp user

1.基本配置
~~~~~~~~~~

``mydajngo/settings.py``

::

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'index',
        'user',
    ]

2.静态资源
~~~~~~~~~~

APP下的静态资源

创建\ ``index/static``\ 文件夹

::

    STATIC_URL = '/static/'

设置根目录下的静态资源

创建\ ``mydjango/public_static``\ 文件夹

::

    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'public_static'),
                        os.path.join(BASE_DIR, 'index/index_static'), ]

在public\_static下和index/index\_static放置2张jpg图片，进行访问：

::

    http://127.0.0.1:8000/static/index_pic.jpg
    http://127.0.0.1:8000/static/linmc.jpg

还可以设置服务器和项目之间的映射，STATIC\_ROOT,该文件与服务器之间构建映射关系

::

    STATIC_ROOT = os.path.join(BASE_DIR, 'all_static')

STATIC\_ROOT用于项目生产部署，在项目开发过程中作用不大。

3.模板路径
~~~~~~~~~~

::

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates'),
                     os.path.join(BASE_DIR, 'index/templates')],

            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

4.数据库配置
~~~~~~~~~~~~

::

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'myproject',
            'HOST': '127.0.0.1',
            'USER': 'root',
            'PASSWORD': 'admin#123',
            'PORT': '3306',
        }
    }

值得注意的是，MySQL5.7在连接数据库时，会提示django.db.utils
OperationalError的错误信息，因为mysql8.0在加密方式上发生了改变，mysql8.0版本的用户密码采用的是cha2加密方式。

为了解决这个问题。将8.0加密方式改为原来的加密方式。可以解决Django连接Mysql数据库的错误问题，在Mysql的可视化工具中运行以下SQL语句。

::

    ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'admin#123';
    flush privileges;

5.中间件
~~~~~~~~

在项目的MIDDLEWARE中添加LocaleMideeleware中间件，使得Django内置的功能支持中文显示。代码如下：

::

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        # 使用中文
        'django.middleware.locale.LocaleMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

6. 编写URL规则
~~~~~~~~~~~~~~

在App里添加urls.py是将属于App的URL都写入该文件。

在从App的urls.py找到具体的URL信息，在根

::

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('index.urls')),
    ]

由于首页的地址分发给index的urls.py处理，因此下一步需要对index的urls.py编写URL信息，代码信息如下：

::

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    from django.urls import path
    from . import views

    urlpatterns = [
        path('', views.index)
    ]

在views.py中编写index函数的处理，代码如下：

::

    from django.shortcuts import render
    from django.http import HttpResponse


    # Create your views here.

    def index(request):
        return HttpResponse('Hello world')

7.获取请求信息
~~~~~~~~~~~~~~

``urls.py``

::

        path('login.html', views.login)

``views.py``

::

    def login(request):
        if request.method == "POST":
            name = request.POST.get('name')
            #相对地址，代表首页地址
            return redirect('/')
        else:
            if request.GET.get('name'):
                name = request.GET.get('name')
            else:
                name = 'Everyone'
            return HttpResponse('username is: ' + name)

在浏览器上分别输入以下URL地址：

::

    http://127.0.0.1:8000/index/login.html
    http://127.0.0.1:8000/index/login.html?name=Tom

8. 通用视图
~~~~~~~~~~~

　通用视图是通过定义和声明类的形式实现的，根据用途划分为三大类：TemplateView、ListView和DetailView。三者说明如下：

　　　　　　1、TemplateView直接返回HTML模板，但无法将数据库的数据展示出来。

　　　　　　2、ListView能将数据库的数据传递给HTML模板，通常获取某个表的所有数据。

　　　　　　3、DetailView能将数据库的数据传递给HTML模板，通常获取数据表的单条数据。
