.. contents::
   :depth: 3
..

消息提示和异常处理
==================

消息提示
--------

app.py

.. code:: python

    from flask import Flask, flash, render_template, request,abort

    app = Flask(__name__)
    app.secret_key = "123"


    @app.route("/")
    def hello_world():
        flash("hello jikexueyuan")
        return render_template("index.html")


    @app.route("/login", methods=["POST"])
    def login():
        form = request.form
        username = form.get("username")
        password = form.get("password")

        if not username:
            flash("请输入用户名....")
            return render_template("index.html")
        if not password:
            flash("请输入密码.....")
            return render_template("index.html")
        if username == "jikexueyuan" and password == "123456":
            flash("登录成功")
            return render_template("index.html")
        else:
            flash("用户名密码错误！！！")
            return render_template("index.html")

index.html

.. code:: html

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>极客学院</title>
        <h1>Hello Login</h1>

        <form action="/login" method="post">
            <input type="text" name="username">
            <input type="password" name="password">
            <input type="submit" value="Submit">
        </form>



        <h2>{{ get_flashed_messages()[0] }}</h2>
    </head>
    <body>

    </body>
    </html>

会话上下文
----------

会话(Session)上下文是一种客户端与服务器端保持状态的解决方案。

在服务器端，会话上下文是用来实现这种解决方案的存储结构。

代码如下：

.. code:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    from flask import Flask, session
    from datetime import datetime

    app = Flask(__name__)

    app.secret_key = "SET_ME_BEFORE_USE_SESSION"


    @app.route('/writeSession')
    def writeSession():
        session['key_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # 将当前时间保存在Session中
        return session['key_time']


    @app.route('/readSession')
    def readSession():
        return session.get('key_time')  # 获得上次调用writeSession时写入的时间，并返回

除了正常的数据保存与读取，flask.session对象还维护自身的状态，这通过如下两个属性来实现。

::

    * new: 判断本次请求的Session是否是新建的。
    * modified： 判断本次请求中是否修改过session键值。

代码示例：

.. code:: python

    # modified的使用方法
    @app.route('/wsession')
    def wsession():
        session['key1_time'] = time.time()       #将当前时间保存在session中
        return session.modified               # 之前进行了session设置，所以此处返回True

异常处理
--------

.. code:: python

    @app.errorhandler(404)
    def not_found(e):
        return render_template("404.html"), 404



    @app.route("/users/<user_id>")
    def users(user_id):
        if int(user_id) == 1:
            return render_template("user.html")
        else:
            abort(404)

404.html

::

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
        <h1>您要找的页面去火星了！！</h1>
        <h2>页面不存在，，，</h2>
    </head>
    <body>

    </body>
    </html>

user.html

::

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    <h1>User </h1>

    </body>
    </html>

小结回顾
--------

.. code:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    from flask import Flask, request, abort, redirect, url_for
    from flask import render_template
    from flask import Markup

    app = Flask(__name__)
    app.config.from_object("config")


    # 模板渲染
    @app.route('/hello')
    @app.route('/hello/<name>')
    def hello(name=None):
        return render_template("hello.html", name=name)


    # 转换特殊字符
    @app.route('/hello1/')
    def hello1():
        return (Markup("<strong>Hi %s!</strong>") % '<blink>Hujianli</blink>')
        # return ("<strong>Hi %s!</strong>" % '<blink>Hujianli</blink>')


    # 重定义和错误处理
    @app.route('/')
    def index():
        return redirect('/check')


    @app.route('/check')
    def check():
        abort(400)
        pass  # 后面代码不会执行


    @app.errorhandler(400)
    def bad_request(error):
        return render_template("bad_request.html"), 400


    ############################ 路由 ############################
    # 1.带变量的路由
    @app.route('/show_welcome/<username>')
    def show_welcome(username):
        return "Hi %s" % username


    # 2.为变量指定类型,指定声明时被映射为int类型
    @app.route('/add_one/<int:number>')
    def add_one(number):
        return "%d" % (number + 1)


    # 3.路径最后分隔符的作用

    # xxxx/school/和xxxx/school都能访问
    @app.route('/school/')
    def school():
        return "The school page"


    # 仅xxxx/school能访问
    @app.route('/student')
    def student():
        return "The student page"


    @app.route("/people/")
    def people():
        name = request.args.get("name")
        if not name:
            return redirect(url_for("login"))
        user_agent = request.headers.get("User-Aagent")
        return "Name:{0};UA:{1}".format(name, user_agent)


    @app.route('/login/', methods=['GET', 'POST'])
    def login():
        if request.method == 'POST':
            user_id = request.headers.get('user_id')
            return 'User: {} login'.format(user_id)
        else:
            return 'Open Login page'


    @app.route('/secret/')
    def secret():
        abort(401)
        print('This is never executed')


    ############################## http方法绑定 ###############################

    # 1.指定HTTP访问方式的方法
    @app.route('/Messaging', methods=['GET', 'POST'])
    def Messaging():
        if request.method == 'POST':
            return "This is Post request!!!!"
            # do_send()
        else:
            return "This is GET request!!!!"
            # show_the_send_from


    # 2.将同一个url根据访问方式映射到不同的函数
    @app.route('/Message', methods=["GET"])
    def show_the_send_from():
        return "this is GET !!!!!!!!!!!!!!!!!!!"


    @app.route('/Message', methods=["POST"])
    def do_send():
        return "this is POST !!!!!!!!!!!!!!!!!!!"


    ################################ 路由地址反向生成 ###################################
    @app.route('/f_root')
    def f_root():
        pass


    @app.route('/industry')
    def f_industry():
        pass


    @app.route('/book/<book_name>')
    def f_book(book_name):
        pass


    with app.test_request_context():
        print(url_for("f_root"))  # /f_root
        print(url_for("f_industry"))  # /industry
        print(url_for("f_industry", name="web"))  # /industry?name=web
        print(url_for("f_book", book_name="Python Book"))  # /book/Python%20Book

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=8080, debug=False)
