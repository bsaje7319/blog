.. contents::
   :depth: 3
..

Flask框架中使用数据库
=====================

::

    在Flask 框架中提供了一种只需要定义一次连接和定义一次释放连接， 之后就可以在所有
    的业务函数中直接使用数据连接来查询数据库。这就需要使用FIask 框架中的两个装饰器和一个g 对象。

    两个装饰器分别是before-request()和teardown-request()，被before-request() 装饰的函数会
    在每个请求之前调用，而被teardown-request() 装饰的函数会在每个请求结束之后调用。此外，
    还有一个after request() 装饰器， 只不过它在业务函数中引发错误时它装饰的函数不会被执行。

    Flask 提供了特殊的g对象， 这个对象与每一个请求是一一对应的， 并且只在函数内部有
    效。不要在其他对象中存储类似信息， 因为在多线程环境下无效。这个特殊的g 对象会在后台神奇地工作， 保证系统正常运行。
    将刚才介绍的装饰器和g 对象结合起来， 就可以实现在所有的请求处理方法中直接使用数
    据库， 而不用在请求处理方法中去重复地编写数据库连接与断开的代码。

其基本使用代码如下：

::

    import flask

    app = flask.Flask(__name__)

    @app.before_request             #应用装饰器每个请求开始时运行被装饰器函数
    def before_request():
        g.db = connect(DBNAME)          #连接sqlite3数据库
        

    @app.teardown_request           #应用装饰器每个请求开始时运行被装饰器函数
    def teardown_request(e):
        db = getattr(g,"db",None)

    if db:
        db.close()          #关闭数据库连接
        g.db.close()

在整个网站程序的请求处理方法中使用以下形式直接使用数据库连接：

::

    cur = g.db.cursor()             #获取数据库游标
    cur.execute("sql语句字符串")     #查询数据库
    cur.connection.commit()         #提交事务
    cur.close()                     #关闭游标

简单示例
--------

演示一个使用数据库保存用户注册信息和验证登录的简单实例。

app1.py

.. code:: python

    # -*- encoding:utf-8 -*-
    import os
    import flask
    from flask import g, request, render_template, session, redirect, url_for
    from sqlite3 import connect

    DBNAME = 'test.db'

    app = flask.Flask(__name__)
    app.secret_key = 'dfadff#$#5dgfddgssgfgsfgr4$T^%^'


    @app.before_first_request  # 在对应用程序实例的第一个请求之前注册要运行的函数, 只会执行一次
    def init_db():
        if not os.path.exists(DBNAME):
            cur = connect(DBNAME).cursor()
            cur.execute('create table user (name text,passwd text)')
            cur.connection.commit()
            print('数据库初始化完成!')


    @app.before_request     # 应用装饰器，每个请求开始时运行被装饰函数
    def before_request():
        g.db = connect(DBNAME)


    @app.teardown_request   # 应用装饰器，每个退出时运行被装饰函数
    def teardown_request(e):
        db = getattr(g, 'db', None)
        if db:
            db.close()          # 关闭数据库游标
        g.db.close()


    @app.route('/')
    def index():
        if 'username' in session:
            return "你好，" + session['username'] + '<p><a href="/logout">注销</a></p>'
        else:
            return '<a href="/login">登录</a>,<a href="/signup">注册</a>'


    @app.route('/signup', methods=['GET', 'POST'])
    def signup():
        if request.method == 'GET':
            return render_template('signup.html')
        else:
            name = 'name' in request.form and request.form['name']
            passwd = 'passwd' in request.form and request.form['passwd']
            if name and passwd:
                cur = g.db.cursor()
                cur.execute('insert into user (name,passwd) values (?,?)', (name, passwd))
                cur.connection.commit()
                cur.close()
                session['username'] = name
                return redirect(url_for('index'))
            else:
                return redirect(url_for('signup'))


    @app.route('/login', methods=['GET', 'POST'])
    def login():
        if request.method == 'GET':
            return render_template('login.html')
        else:
            name = 'name' in request.form and request.form['name']
            passwd = 'passwd' in request.form and request.form['passwd']
            if name and passwd:
                cur = g.db.cursor()
                cur.execute('select * from user where name=?', (name,))
                res = cur.fetchone()
                if res and res[1] == passwd:
                    session['username'] = name
                    return redirect(url_for('index'))
                else:
                    return '登录失败!'
            else:
                return '参数不全!'


    @app.route('/logout')
    def logout():
        session.pop('username', None)
        return redirect(url_for('index'))


    if __name__ == '__main__':
        app.run(debug=True)

signup.html

.. code:: html

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>
    <!DOCTYPE html>
            <form method='post'>
            <input type='text' name='name' placeholder='用户名' />
            <input type='password' name='passwd' placeholder='密码' />
            <input type='submit' value='注册' />
            </form>
    </body>
    </html>

login.html

.. code:: html

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <body>

    <form method='post'>
        <input type='text' name='name' placeholder='用户名'/>
        <input type='password' name='passwd' placeholder='密码'/>
        <input type='submit' value='登录'/>
    </form>

    </body>
    </html>

flask使用sqlit3的两种方式
-------------------------

https://www.cnblogs.com/hhh5460/p/6557350.html

Flask使用数据库实现用户登录-用户注销功能
----------------------------------------

https://www.cnblogs.com/hhh5460/p/9745812.html
