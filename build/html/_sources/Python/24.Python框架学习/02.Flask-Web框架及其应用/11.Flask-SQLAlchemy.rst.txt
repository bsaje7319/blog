.. contents::
   :depth: 3
..

Flask-SQLAlchemy
================

SQLAlchemy是Python编程语言下的一款开源软件，提供了SQL工具包及对象关系映射（ORM）工具，SQLAlchemy使用MIT许可证发行，它采用简单的Python语言，为高效和高性能的数据库访问设计，实现了完整的企业级持久模型，SQLAlchemy非常关注数据库的量级和性能。

安装
----

.. code:: shell

    pip install flask_sqlalchemy

示例
----

初始化数据库操作

.. code:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-
    from sqlalchemy.ext.declarative import declarative_base
    from sqlalchemy import Column, Integer, String
    from sqlalchemy import create_engine
    from sqlalchemy.orm import scoped_session, sessionmaker

    Base = declarative_base()


    class Account(Base):
        __tablename__ = u'account'

        id = Column(Integer, primary_key=True)
        user_name = Column(String(50), nullable=False)
        password = Column(String(200), nullable=False)
        title = Column(String(50), nullable=False)
        salary = Column(Integer)

        def is_active(self):
            # """假设所有用户都是活跃用户."""
            return True

        def get_id(self):
            # """  返回账号ID, 用方法返回属性值提高了表的封装性."""
            return self.id

        def is_authenticated(self):
            # """假设已经通过验证"""
            return True

        def is_anonymous(self):
            # """具有登录名和密码的账号不是匿名用户"""
            return False


    db_connect_string = 'sqlite:///db/account.db'

    engine = create_engine(db_connect_string)
    SessionType = scoped_session(sessionmaker(bind=engine, expire_on_commit=False))


    def GetSession():
        return SessionType()


    Base.metadata.create_all(engine)

连接数据库进行增删改查

.. code:: python

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-
    from sqlalchemy import create_engine
    from sqlalchemy.orm import scoped_session, sessionmaker
    import orm
    from sqlalchemy import or_

    ################  连接数据库 ###########
    db_connect_string = 'sqlite:///db/account.db'

    engine = create_engine(db_connect_string)
    SessionType = scoped_session(sessionmaker(bind=engine, expire_on_commit=False))


    def GetSession():
        return SessionType()


    from contextlib import contextmanager


    @contextmanager
    def session_scope():
        session = GetSession()
        try:
            yield session
            session.commit()
        except:
            session.rollback()
            raise
        finally:
            session.close()


    ######### 操作数据库 ################
    def InsertAccount(user, passw, title, salary):  # 新增操作
        with session_scope() as session:
            account = orm.Account(user_name=user, password=passw, title=title, salary=salary)
            session.add(account)
            return


    def GetAccount(id=None, user_name=None):  # 查询操作
        with session_scope() as session:
            return session.query(orm.Account).filter(or_(orm.Account.id == id, orm.Account.user_name == user_name)).first()


    def DeleteAccount(user_name):  # 删除操作
        with session_scope() as session:
            account = GetAccount(user_name=user_name)
            if account:
                session.delete(account)


    def UpdateAccount(id, user_name, password, title, salary):  # 更新操作
        with session_scope() as session:
            account = session.query(orm.Account).filter(orm.Account.id == id).first()
            if not account:
                return
            account.user_name = user_name
            account.password = password
            account.salary = salary
            account.title = title


    # 调用新增数据
    InsertAccount("David Li", "123", "System Manager", 3000)
    InsertAccount("Rebeca Li", "", "Accountant", 3000)
    InsertAccount("David Backer", "123", "Engineer", 3000)
    InsertAccount("Siemon Bond", "xxx", "Engineer", 4000)
    InsertAccount("Van Berg", "123", "General Manager", None)
    InsertAccount("Howard", "123", "General Manager", 3000)

    # 调用查询数据操作
    GetAccount(2)

    # 调用删除数据操作
    DeleteAccount("Howard")

    # 调用更新数据操作
    UpdateAccount(1, "admin", "none", "System Admin", 2000)

连接Mysql数据库
---------------

.. code:: python

    #!/usr/bin/env python
    #-*- coding:utf8 -*-
    # auther; 18793
    # Date：2019/4/24 12:45
    # filename: learn_sqlalchemy.py

    #导入模块
    from flask import Flask
    from flask_sqlalchemy import SQLAlchemy


    app = Flask(__name__)
    #2.定义要连接的数据库
    DB_URL = "mysql+pymysql://root:admin#123@127.0.0.1:3306/learn_sqlalchemy?charset=utf8"

    #3.添加到到配置中
    app.config['SQLALCHEMY_DATABASE_URI'] =DB_URL
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] =False
    # 4.实例化一个对象，将app传进去
    db = SQLAlchemy(app)

    @app.route("/")
    def hello_world():
        return "Helllo world!"


    if __name__ == '__main__':
        app.run()

.. figure:: ../../../_static/flask12.png
   :alt: 

关系操作
--------

::

    1.E-R图设计

    2.将E-R图转为SQLAlchemy表达式

    3.连接查询
