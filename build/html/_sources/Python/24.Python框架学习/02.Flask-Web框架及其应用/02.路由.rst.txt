.. contents::
   :depth: 3
..

路由
====

新增一个路由
------------

-  访问http://127.0.0.1:5000/hujianli时触发index方法，方法名称可以自定义

::

   #!/usr/bin/env python
   #-*- coding:utf8 -*-
   # auther; 18793
   # Date：2019/4/19 12:41
   # filename: helloword.py

   from flask import Flask
   app = Flask(__name__)

   @app.route("/")
   def hello():
       return "Hello World!你好啊，小健"

   @app.route("/hujianli")
   def index():
       return "This is index! ......"

   if __name__ == '__main__':
       app.debug = True
       app.run()

eg

::

   #!/usr/bin/env python
   #-*- coding:utf8 -*-
   # auther; 18793
   # Date：2019/4/19 12:41
   # filename: helloword.py

   from flask import Flask
   app = Flask(__name__)

   @app.route("/")
   def hello():
       return "Hello World!你好啊，小健"

   @app.route("/hujianli")
   def index():
       return "This is index! ......"

   # 匹配任意的数据类型，http://127.0.0.1:5000/user/XXX
   @app.route("/user/<username>")
   def user_login(username):
       return "Hello {}".format(username)


   #只匹配整数型 http://127.0.0.1:5000/post/123，输入字符串会报错
   @app.route("/post/<int:post_id>")
   def show_post(post_id):
       return "Post:{}".format(post_id)


   if __name__ == '__main__':
       app.debug = True
       app.run()

eg

::

   # 获取url信息，通过url_for函数,http://127.0.0.1:5000/url  输出/post/3
   @app.route("/url")
   def get_url():
       return url_for("show_post", post_id=3)

Http方法
--------

|image0|

::

   # Http请求
   @app.route("/login",methods=['POST','GET','PUT'])
   def login():
       if request.method == "GET":
           return "这是get请求"
       elif request.method == "POST":
           pass
       else:
           pass

-  POST和GET请求判断

::

   #!/usr/bin/env python
   #-*- coding:utf8 -*-
   # auther; 18793
   # Date：2019/6/25 16:58
   # filename: day3_flask.py
   import flask
   html_txt = """
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <title>Title</title>
       <body>
       <h2>  收到GET请求 </h2>
       <form method='post'>        
           <input type="submit" value="发送POST请求" />
       </form>
   </head>

   </body>
   </html>

   """
   app = flask.Flask(__name__)     #实例化主类Flask

   @app.route("/route",methods=["GET", "POST"])
   def hello():                            #定义业务函数
       if flask.request.method == "GET":       # 判断收到的请求是否为GET
           return html_txt
       else:
           return "收到POST请求，我是Flask"

   if __name__ == '__main__':
       app.run(debug=True)

使用cookie跟踪用户的实例：
--------------------------

::

   #!/usr/bin/env python
   # -*- coding:utf8 -*-
   # auther; 18793
   # Date：2019/6/25 17:23
   # filename: day5_flask.py
   import flask

   html_txt = """
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <title>Title</title>
       
   </head>
   <body>

   <h2> 收到GET 请求</h2>
   <a href="/get_info"> 获取cookie信息 </a>
   </body>
   </html>
   """

   app = flask.Flask(__name__)


   @app.route("/set_info/<name>")
   def set_cks(name):
       name = name if name else 'anonymous'
       resp = flask.make_response(html_txt)
       resp.set_cookie("name", name)
       return resp


   @app.route("/get_info")
   def get_cks():
       name = flask.request.cookies.get("name")  # 获取cookie信息
       return "获取的cookie信息是：" + name


   if __name__ == '__main__':
       app.run(debug=True)

|image1|

使用session跟踪用户的实例：
---------------------------

Flask提供了session对象用来将Cookie数据加密储存。

.. code:: python

   #!/usr/bin/env python
   # -*- coding: utf-8 -*-
   # @auther:   18793
   # @Date：    2020/8/7 17:06
   # @filename: app5.py
   # @Email:    1879324764@qq.com
   # @Software: PyCharm

   from flask import Flask, session
   import os
   from datetime import timedelta

   app = Flask(__name__)
   app.config['SECRET_KEY'] = os.urandom(24)
   # 自定义设置session的有效期
   app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=2)

   html_txt = """
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <title>Title</title>

   </head>
   <body>

   <h2> 收到GET 请求</h2>
   <a href="/get_info"> 获取cookie信息 </a>
   </body>
   </html>
   """



   @app.route("/set_info/<name>")
   def set_cks(name):
       name = name if name else 'anonymous'
       session["name"] = name
       return html_txt


   @app.route("/get_info")
   def get_cks():
       name = "name" in session and session['name']    #获取session
       if name:
           return "%s 登录成功" % name
       else:
           return "登录失败"


   if __name__ == '__main__':
       app.run(debug=True)

参考代码

.. code:: python

   from flask import Flask, session
   import os
   from datetime import timedelta

   app = Flask(__name__)
   app.config['SECRET_KEY'] = os.urandom(24)
   # 自定义设置session的有效期
   app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=2)


   @app.route('/')
   def index():
       # 设置session
       session['username'] = 'derek'
       # permanent:过期时间，默认为false,如果设置为True,则默认为31天之后过期
       # 可以通过app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=2)
       # 来自定义过期时间，这样设置后，session.permanent = True的session有效期则为两个小时
       session.permanent = True
       return 'Hello World!'


   @app.route('/login')
   def get_session():
       # 获取session
       if session.get('username') == "derek":  # derek
           return "登录成功。欢迎来到登录界面"
       else:
           return "登录失败！"


   @app.route('/login_out')
   def delete_session():
       # 删除session
       session.pop('username')  # 删除指定的session
       # session.clear()          #删除所有session
       return '注销成功'


   if __name__ == '__main__':
       app.run(debug=True)

在Flask中生成响应
-----------------

1.重定向
~~~~~~~~

::

   @app.route('/hello')
   def hello():
       return redirect('http://www.baidu.com')

重定向到其他视图

.. code:: python

   @app.route('/foo')
   def foo():
       data = {
           "name": "hujianli",
           "gender": "male"
       }

       response = make_response(json.dumps(data))
       response.mimetype = "application/json"
       return response
   # 重定向到其他视图
   @app.route('/hello1')
   def hello1():
       return redirect(url_for("foo"))

2.错误响应
~~~~~~~~~~

abort()函数前不需要使用return语句，但一旦abort()函数被调
用，abort()函数之后的代码将不会被执行。

.. code:: python

   @app.route('/404')
   def not_found():
       abort(404)

3.响应格式
~~~~~~~~~~

大多数情况下，我们会使用HTML格式，这也是Flask中的默认设置。

::

   Content-Type: text/html; charset=utf-8

1.纯文本
^^^^^^^^

MIME类型：text/plain

.. code:: python

   @app.route('/foo10')
   def foo10():
       response = make_response('''Note to: Peter
       from: Jane
       heading: Reminder
       body: Don
       't forget the party!
       ''')

       response.mimetype = 'text/plain'
       return response

2.HTML
^^^^^^

MIME类型：text/html

.. code:: python

   @app.route('/foo12')
   def foo12():
       response = make_response('''<h1>h1   h1 </h1>
       <h2>h2   h2 </h2>
       ''')

       response.mimetype = 'text/html'
       return response

3.XML
^^^^^

MIME类型：application/xml

.. code:: python

   @app.route('/foo13')
   def foo13():
       response = make_response('''<?xml version="1.0" encoding="UTF-8"?>
   <note>
   <to>Peter</to>
   <from>Jane</from>
   <heading>Reminder</heading>
   <body>Don't forget the party!</body>
   </note>
       ''')

       response.mimetype = 'application/xml'
       return response

4.JSON
^^^^^^

MIME类型：application/json

.. code:: python

   @app.route('/foo14')
   def foo14():
       response = make_response('''{
   "note":{
   "to":"Peter",
   "from":"Jane",
   "heading":"Remider",
   "body":"Don't forget the party!"
   }
   }
       ''')

       response.mimetype = 'application/json'
       return response

Flask通过包装这些方法提供了更方便的jsonify()函数。借助
jsonify（）函数，我们仅需要传入数据或参数，它会对我们传入的参数
进行序列化，转换成JSON字符串作为响应的主体，然后生成一个响应
对象，并且设置正确的MIME类型。

.. code:: python

   @app.route('/foo15')
   def foo15():
       return jsonify(name='Grey Li', gender='male')


   @app.route('/foo16')
   def foo16():
       return jsonify({"name": 'Grey Li', "gender": 'male'})

.. |image0| image:: ../../../_static/http_fangfa.PNG
.. |image1| image:: ../../../_static/flask00002.png
